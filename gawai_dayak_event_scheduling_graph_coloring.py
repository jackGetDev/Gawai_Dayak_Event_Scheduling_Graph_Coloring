# -*- coding: utf-8 -*-
"""Gawai Dayak Event Scheduling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qk45YMfEpb3TnypOHhNFkmMEmrVkxGct
"""

import networkx as nx
import matplotlib.pyplot as plt
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from io import BytesIO
from svglib.svglib import svg2rlg
import PyPDF2

class EventScheduleGraph:
    def __init__(self, events, conflicts):
        self.graph = nx.Graph()
        self.graph.add_nodes_from(events)
        self.graph.add_edges_from(conflicts)

    def graph_coloring(self):
        colors = nx.coloring.greedy_color(self.graph, strategy="random_sequential")
        return colors

    def generate_report(self, coloring, output_filename):
        doc = SimpleDocTemplate(output_filename, pagesize=letter)
        styles = getSampleStyleSheet()
        title_style = styles["Title"]
        heading_style = styles["Heading1"]
        paragraph_style = styles["Normal"]

        story = []
        title = Paragraph("Gawai Dayak Event Scheduling: Conflicts and Fit Events Report", title_style)
        story.append(title)
        story.append(Spacer(1, 20))


        graph_image = self.draw_graph(coloring)
        story.append(graph_image)

        graph_explanation = "Graph Explanation: The graph represents Gawai Dayak events and their conflicts. Nodes are events, and edges connect conflicting events."
        graph_explanation_paragraph = Paragraph(graph_explanation, paragraph_style)
        story.append(Spacer(1, 12))
        story.append(graph_explanation_paragraph)
        story.append(Spacer(1, 20))

        conflicts_text = "Events related to Gawai Dayak that may conflict with each other:"
        conflicts_heading = Paragraph(conflicts_text, heading_style)
        story.append(conflicts_heading)

        conflict_found = False
        for event in self.graph.nodes():
            conflicts = self.get_conflicts(event, coloring)
            if conflicts:
                conflict_found = True
                conflicts_str = ", ".join(conflicts)
                event_conflicts_text = f"- {event}: {conflicts_str}"
                event_conflicts_paragraph = Paragraph(event_conflicts_text, paragraph_style)
                story.append(event_conflicts_paragraph)

        if not conflict_found:
            no_conflict_text = "No conflicts found between Gawai Dayak events."
            no_conflict_paragraph = Paragraph(no_conflict_text, paragraph_style)
            story.append(no_conflict_paragraph)

        story.append(Spacer(1, 40))
        fit_heading = Paragraph("Best fit events for each Gawai Dayak event:", heading_style)
        story.append(fit_heading)

        for event in self.graph.nodes():
            best_fit_events = self.get_best_fit_events(event, coloring)
            if best_fit_events:
                best_fit_str = ", ".join(best_fit_events)
                event_best_fit_text = f"- {event}: {best_fit_str}"
                event_best_fit_paragraph = Paragraph(event_best_fit_text, paragraph_style)
                story.append(event_best_fit_paragraph)

        doc.build(story)


    def get_conflicts(self, event, coloring):
        return [node for node in self.graph.neighbors(event) if coloring[node] != coloring[event]]

    def get_best_fit_events(self, event, coloring):
        color = coloring[event]
        events = [node for node in self.graph.nodes() if coloring[node] == color and node != event]
        return events

    def draw_graph(self, coloring):
        fig = plt.figure(figsize=(12, 8))
        pos = nx.spring_layout(self.graph, k=0.5, iterations=50)
        nx.draw(self.graph, pos, with_labels=True, node_color=[coloring[node] for node in self.graph.nodes()],
                cmap=plt.cm.rainbow, node_size=2000, font_size=10, font_weight='bold')

        for edge in self.graph.edges():
            if coloring[edge[0]] != coloring[edge[1]]:
                nx.draw_networkx_edges(self.graph, pos, edgelist=[edge], width=2, edge_color='red')

        plt.title("Gawai Dayak Event Scheduling with Graph Coloring")

        image_buffer = BytesIO()
        plt.savefig(image_buffer, format="svg")
        plt.close()

        svg_data = image_buffer.getvalue()
        drawing = svg2rlg(BytesIO(svg_data))

        return Image(drawing, width=500, height=375)

def set_pdf_tab_title(input_filename, tab_title):
    pdf_reader = PyPDF2.PdfReader(input_filename)
    pdf_writer = PyPDF2.PdfWriter()

    for page in pdf_reader.pages:
        pdf_writer.add_page(page)

    pdf_writer.add_metadata({
        '/Title': tab_title
    })

    with open(input_filename, 'wb') as output_file:
        pdf_writer.write(output_file)

def main():
    events = ["Opening Ceremony", "Traditional Dance Performance", "Craft Exhibition", "Cultural Workshops", "Gawai Dayak Concert", "Ethnic Food Festival", "Panel Discussion"]
    conflicts = [
        ("Opening Ceremony", "Traditional Dance Performance"),
        ("Opening Ceremony", "Craft Exhibition"),
        ("Traditional Dance Performance", "Craft Exhibition"),
        ("Cultural Workshops", "Gawai Dayak Concert"),
        ("Ethnic Food Festival", "Panel Discussion")
    ]

    event_schedule_graph = EventScheduleGraph(events, conflicts)
    coloring = event_schedule_graph.graph_coloring()
    output_filename = "gawai_dayak_conflicts_and_fit_report.pdf"

    event_schedule_graph.generate_report(coloring, output_filename)
    set_pdf_tab_title(output_filename, "Gawai Dayak Event Scheduling")

if __name__ == "__main__":
    main()